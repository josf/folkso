<?php
  /**
   * @package Folkso
   * @subpackage Tagserv
   * @author Joseph Fahey
   * @copyright 2008 Gnu Public Licence (GPL)
   */

require_once('folksoUserValid.php');

  /**
   * @package Folkso
   */
class folksoUserCreds extends folksoUserValid {
  public $userid;
  public $digest;
  public $method;
  public $realm;

  /**
   * Once parsed by http_digest_parse(), the digest data goes into
   * this assoc array.
   */
  private $digest_data = array();

  /**
   * $method should be $_SERVER['REQUEST_METHOD']
   */
  function __construct ($digest, $method, $realm) {
    $this->digest = $digest;
    $this->method = $method;
    $this->realm = $realm;
  }

  function getUsername () {
    return 'folksy';
    //    return $this->username;
  }

  function tag_create_access () {
    return true;
  }

  function tag_admin_access () {
    return true;
  }
  function userid () {
    return $this->userid;
  }


  /**
   * Partly inspired by the Auth HTTP PEAR library. Returns an assoc
   * array of the key/value pairs from a digest authorization response
   * header.
   *
   */
  function parse_auth_header($header = '') {
    if (strlen($header) == 0) {
      $header = $this->digest;
    }

    $raw = explode(',', $header);
    $auth = array();
    foreach ($raw as $rr) {
      $key = '';
      $val = '';

      $rr = trim($rr);
      if(strpos($rr,'=') !== false) {
        $lhs = substr($rr,0,strpos($rr,'='));
        $rhs = substr($rr,strpos($rr,'=')+1);
        $lhs = trim($lhs);
        $rhs = trim($rhs);

        if ((substr($rhs, 0, 1) == substr($rhs, -1, 1)) &&
            ((substr($rhs, 0, 1) == '"') ||
             (substr($rhs, 0, 1) == "'"))) {
          $val = substr($rhs, 1, (strlen($rhs) - 2));
        }
        else {
          $val = $rhs;
        }

        // avoiding the 'Digest firstparam="' part
        if (strstr($lhs, ' ') == false) {
          $key = $lhs;
        }
        else {
          $key = substr($lhs, (strpos($lhs, ' ') + 1));
        }
        $auth[$key] = $val;
      }
    }
    if (isset($auth['username'])){
      $this->username = $auth['username'];
    }
    $this->digest_data = $auth;
    $this->username = $auth['username'];
    $this->nonce = $auth['nonce'];
    $this->nc = $auth['nc'];
    $this->cnonce = $auth['cnonce'];
    $this->qop = $auth['qop'];
    $this->response = $auth['response'];
    $this->opaque = $auth['opaque'];
    
    return $auth;
  }
   
  /**
   * Verify that the digest contains all the necessary fields.
   *
   */
  function validateAuth ($header = '') {
    if (empty($header)) {
      $header = $this->header;
    }

    if ((isset($this->username)) &&
        (isset($this->nonce)) &&
        (isset($this->nc)) &&
        (isset($this->cnonce)) &&
        (isset($this->qop)) &&
        (isset($this->response)) &&
        (isset($this->opaque))) {
      return true;
    }

    $this->parse_auth_header($header);

    if ((isset($this->username)) &&
        (isset($this->nonce)) &&
        (isset($this->nc)) &&
        (isset($this->cnonce)) &&
        (isset($this->qop)) &&
        (isset($this->response)) &&
        (isset($this->opaque))) {
      return true;
    }
    else {
      return false;
    }
  }


function getUserPasswd ($user) {
  if ($user == 'folksy') {
    return "folksong";
  }
}

/** 
 * $auth is an array generated by http_parse_digest()
 *
 */


public function Validate () {
  $a1unhashed = $this->buildDigestA1($this->getUserPasswed($this->username));
  $a2unhashed = $this->buildDigestA2();

  $response_calc = $this->buildDigestResponse( $a1unhashed, $a2unhashed);
}


function generateCorrectDigestResponse ($auth = '') {
  if (!is_array($auth)) {
    $auth = $this->digest_data;
  }
  /*
  var_dump($auth);

  $a1 = md5($auth['username'] . ':' . $this->realm . ':' . $this->getUserPasswd($auth['username']));
  $a2 = md5($this->method .':'.$data['uri']);
  $valid = md5(implode(array( $a1, $auth['nonce'], $auth['nc'], $auth['cnonce'], $auth['qop'], $a2)), ':');
  return $valid; */

 $ret =  $this->buildDigestResponse( $auth, 
                       $this->buildDigestA1($auth, $this->realm, 'folksy'),
                       $this->buildDigestA2($auth, $this->method));
 return $ret;
}

function buildDigestResponse ($a1unhashed, $a2unhashed) {
  $r_unhashed = 
    md5($a1unhashed) . ':' .
    $this->nonce . ':' .
    $this->nc . ':' .
    $this->cnonce . ':' .
    $this->qop . ':' .
    md5($a2unhashed);
  return $r_unhashed;
}
 
function buildDigestA1 ($passwd) {
  $a1 =  $this->username . ':' . $this->realm . ':' . $passwd;
  return $a1;
}   
    
function buildDigestA2 () {
  $a2unhashed = $this->method . ':' . $this->uri;
  return $a2unhashed;
}

function displayDigestData () {
  foreach ($this->digest_data as $key => $val) {
    print "<p>$key ---- $val</p>";
  }
  print "<p>passwd ----" . $this->getUserPasswd('folksy') . "</p>";
}


  } //end class

?>
